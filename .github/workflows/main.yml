name: CI Pipeline

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:
jobs:
  build-push-to-ecr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
        

    steps:
    
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set env
      run: |
          {
            echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}"
            echo "RELEASE_FNAME=underwater.${GITHUB_REF#refs/*/v}.zip"
            echo "OCTOPUS_PROJ=underwater-octo-github"
            echo "OCTOPUS_TARGET=Development"
            echo "OCTOPUS_PACKAGE_SUFFIX="
          } >> $GITHUB_ENV
      
    - name: Set output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_V }}
  
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
 
   # - name: Run tests and generage coverage report
   #   run: |
   #       pip install pytest pytest-cov
   #       pytest --cov=./ --cov-report=xml -vv
  
   # - name: Upload coverage to Codecov
   #   uses: codecov/codecov-action@v2
   #   with:
   #     directory: ./
   #     env_vars: OS,PYTHON
   #     fail_ci_if_error: true
   #     files: coverage.xml
   #     flags: unittests
   #     name: codecov-umbrella
   #     verbose: true
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-SECRET-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set env for DOCKER
      run: |
        {
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}"
        echo "ECR_REPOSITORY=${{ secrets.REPO_NAME }}"
        echo "IMAGE_TAG=${{ steps.vars.outputs.tag }}"
         } >> $GITHUB_ENV

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image 
      run: |
        # Build a docker container and push it to ECR 
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }} .
        echo "Pushing image to ECR..."
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}
        echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}"
        
        
    - name: Replace image in config
      uses: datamonsters/replace-action@v2
      with:
        files: sampleDeployment.yml
        replacements: '$IMAGE=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}'
        
    - name: Prepare Upload Package
      run: |
          echo "Packaging for Octopus ..."
          echo "Zipping files and folders to ${{ env.RELEASE_FNAME }}"
          zip -r ${{ env.RELEASE_FNAME }} . -i '*'
          echo "Succesfully zipped ${{ env.RELEASE_FNAME }}"  
        
    - name: Install Octopus Cli
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.6
      with:
        version: latest
        
    - name: Push Package to Octopus Deploy
      uses: OctopusDeploy/push-package-action@v1.0.2
      with:
        server: ${{ secrets.OCTOPUS_SERVER }}
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        debug: true
        ignore_ssl_errors: false
        log_level: debug
        overwrite_mode: FailIfExists
        packages: ${{ env.RELEASE_FNAME }}

    - name: Create Release in Octopus Deploy
      uses: OctopusDeploy/create-release-action@v1.0.4
      with:
        server: ${{ secrets.OCTOPUS_SERVER }}
        api_key: ${{ secrets.OCTOPUS_APIKEY }}
        debug: true
        project: ${{ env.OCTOPUS_PROJ }}
        deploy_to: ${{ env.OCTOPUS_TARGET }}
        package: underwater-${{ env.OCTOPUS_PACKAGE_SUFFIX }}:${{ env.RELEASE_VERSION }}
