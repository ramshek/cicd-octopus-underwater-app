name: CI Pipeline

on:
  push:
    tags:
      - v*.*.*
jobs:
  build-push-to-ecr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Set output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_V }}
  
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
 
    - name: Run tests and generage coverage report
      run: |
          pip install pytest pytest-cov
          pytest --cov=./ --cov-report=xml -vv
  
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        directory: ./
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-SECRET-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1



    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ steps.vars.outputs.tag }}
      run: |
        # Build a docker container and push it to ECR 
        echo ${{ env.ECR_REGISTRY }} 
        echo ${{ env.ECR_REPOSITORY }}
        echo ${{ env.IMAGE_TAG }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker image ls
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
